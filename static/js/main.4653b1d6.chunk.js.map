{"version":3,"sources":["App.styled.jsx","components/Container/Container.styled.jsx","components/Container/Container.js","components/ContactForm/ContactForm.styled.jsx","redux/actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.jsx","redux/selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["ContactTitle","styled","h2","Title","p","MainContainer","div","Container","title","children","size","defaultProps","LabelName","label","Search","input","BtnContact","button","FormSt","form","addContact","createAction","deleteContact","filterContact","ContactForm","onSubmit","useState","name","setName","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","preventDefault","map","contact","includes","alert","addNewContact","id","shortid","generate","type","onChange","pattern","required","ContactItem","li","BtnDelete","onFilteredContacts","normalizedFilter","filter","toLowerCase","trim","ContactList","onClick","FilteredName","FilteredInput","Filter","target","App","createReducer","action","payload","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","obj","persistor","persistStore","ReactDOM","render","StrictMode","data","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4653b1d6.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactTitle = styled.h2`\nmargin-top: 30px;\n`;","import styled from '@emotion/styled';\n\nexport const Title = styled.p`\nfont-size: 40px;\nfont-weight: 900;\nmargin: 20px 0px 30px 10px;\ndisplay: inline-flex;\n\n`;\n\nexport const MainContainer = styled.div`\nmargin-left: 20px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AiFillPhone } from 'react-icons/ai';\n\nimport { Title, MainContainer } from './Container.styled';\n\nfunction Container({ title, children }) {\n  return (\n    <MainContainer>\n      <AiFillPhone size={30} />\n      <Title>{title}</Title>\n      {children}\n    </MainContainer>\n  );\n}\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import styled from '@emotion/styled';\n\nexport const LabelName = styled.label`\ndisplay: block;\nmargin-right: 20px;\nmargin-bottom: 10px;\n`;\n\nexport const Search = styled.input`\ndisplay: block;\nmargin-top: 10px;\n`;\n\nexport const BtnContact = styled.button`\nfont-size: 10px;\nfont-weight: 700;\nbackground-color: #fff;\nborder: 2px solid grey;\nmargin-top: 10px;\nmargin-bottom: 30px;\nwidth: 130px;\ncursor: pointer;\n\npadding: 5px 15px;\ntext-align: center;\n&:hover {\n    color: blue;\n}\n`;\n\nexport const FormSt = styled.form`\nborder: 2px solid grey;\n  width: 300px;\n  height: 150px;\n  padding: 10px;\n\n`;","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/addContact');\nexport const deleteContact = createAction('contacts/deleteContact');\n\nexport const filterContact = createAction('contacts/filterContact');\n","import { LabelName, Search, BtnContact, FormSt } from './ContactForm.styled';\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport { addContact } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.items);\n  const dispatch = useDispatch();\n\n  //метод, который будет обновлять состояние input\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  //метод для отправки form\n  const handleSubmit = e => {\n    //функция, чтобы старница не перезагружалась при submit\n    e.preventDefault();\n\n    if (contacts.map(contact => contact.name).includes(name)) {\n      alert(`Sorry, but ${name} is already in contacs.`);\n      return;\n    }\n\n    //передаем props Компонента ContactForm (ребенка) в Компонент App (родитель)\n    const addNewContact = {\n      // id: shortid.generate(),\n      //короткая запись свойств объекта\n      name,\n      number,\n      id: shortid.generate(),\n    };\n\n    dispatch(addContact(addNewContact));\n    //после submit сбрасываем все поля input\n    reset();\n  };\n\n  //метод, который сбрасывает все поля input\n  const reset = () => {\n    // setId('');\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormSt onSubmit={handleSubmit}>\n      <LabelName>\n        {' '}\n        Name\n        <Search\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </LabelName>\n      <LabelName>\n        Number\n        <Search\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </LabelName>\n      <BtnContact type=\"submit\">Add contact</BtnContact>\n    </FormSt>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\nfont-size: 15px;\ndisplay: flex;\nmargin: 20px 20px;\n\n`;\n\nexport const BtnDelete = styled.button`\nmargin-left: 10px;\ncursor: pointer;\nbackground-color: #fff;\nborder: 1px solid grey;\n`;","//метод для фильтра контактов\nexport const onFilteredContacts = ({ items, filter }) => {\n  //приводим текс к нижнему регистру и удаляем пробелы по бокам\n  const normalizedFilter = filter.toLowerCase().trim();\n  return items.filter(contact =>\n    contact.name.toLowerCase().trim().includes(normalizedFilter),\n  );\n};\n","import React from 'react';\nimport { ContactItem, BtnDelete } from './ContactList.styled';\nimport shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/actions';\nimport { onFilteredContacts } from '../../redux/selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(onFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <ContactItem key={shortid.generate()}>\n          <p>\n            {name}: {number}\n          </p>\n          <BtnDelete type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </BtnDelete>\n        </ContactItem>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilteredName = styled.label`\ndisplay: inline-block;\nmargin-right: 20px;\nmargin-top: 20px;\n`;\nexport const FilteredInput= styled.input`\ndisplay: flex;\nmargin-right: 20px;\nmargin-top: 10px;\n`;","import React from 'react';\nimport { FilteredName, FilteredInput } from './Filter.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\n\nfunction Filter() {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <form>\n        <FilteredName>\n          Find contacts by name\n          <FilteredInput\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={e => dispatch(filterContact(e.target.value))}\n          />\n        </FilteredName>\n      </form>\n    </>\n  );\n}\n\nexport default Filter;\n","import { ContactTitle } from './App.styled';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nfunction App() {\n  return (\n    <Container title=\"Phonebook\">\n      <ContactForm />\n      <ContactTitle>Contacts</ContactTitle>\n      <Filter />\n      <ContactList title=\"Contacts\"></ContactList>\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterContact } from './actions';\n\nconst items = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [filterContact]: (state, action) => action.payload,\n});\n\nconst rootReducer = combineReducers({\n  items,\n  filter,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: true,\n});\nconst persistor = persistStore(store);\nconst obj = { store, persistor };\nexport default obj;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport data from './redux/store.js';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={data.store}>\n      <PersistGate loading={null} persistor={data.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}